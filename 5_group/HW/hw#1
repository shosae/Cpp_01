------------------
// Ram.h
#define RAM_H

class Ram {
	char mem[100 * 1024]; // 100KB 메모리, 한 번지는 한 바이트이므로 char 타입 사용
	int size;

public:
	Ram();  //생성자 - mem 배열을 0으로		 초기화하고 size를 100*1024로 초기화
	~Ram(); //소멸자 - "메모리 제거됨" 문자열 출력
	char read(int address); //adress 주소의 메모리 바이트 리턴
	void write(int address, char value); //adress 주소에 한 바이트로 value 저장
};
------------------------------------
//Ram.cpp
#include <iostream>
#include "Ram.h"
using namespace std;

Ram::Ram() {
    size = 100 * 1024; // 사이즈를  100*1024로 초기화
    for (int i = 0; i < size; i++)
        mem[i] = 0; //각 배열 0으로 초기화
}

Ram::~Ram() {
    cout << "메모리 제거됨" << endl; //메모리 제거됨 출력
}

char Ram::read(int address) {
    return mem[address]; //주소에 들어있는 데이터 리턴
}

void Ram::write(int address, char value) {
    mem[address] = value; //주소에 한 바이트로 데이터 저장
}
--------------------------------------
//main.cpp
#include <iostream>
using namespace std;
#include "Ram.h"

int main() {
	Ram ram; 

	ram.write(100, 20); // 100번지에 20 저장
	ram.write(101, 30); // 101번지에 30 저장

	char res = ram.read(100) + ram.read(101); // 20 + 30 = 50
	
	ram.write(102, res);// 102번지에 50 저장
	cout << "102 번지의 값 = " << (int)ram.read(102) << endl; //102번지 값 출력
}
--------------------------------------------
클래스 선언부 - Ram.h
클래스 구현부 - Ram.cpp
메인함수 - main.cpp

주소를 읽고 그 주소에 데이터를 기록하고 읽는것을 구현해야함

Ram() 작성할때는 메모리 크기 지정, 배열 초기화

~Ram()은 소멸자니까 메모리 제거됨 출력만

read는 주소에 데이터값 읽어와야되니까 리턴

write는 주소에 데이터를 넣어야함!
